import Head from "next/head";
import Link from "next/link";
import { LandingPage } from "~/components/landing";
import { api } from "~/utils/api";

function CreatePluginComponent() {
  const { mutate, error } = api.plugins.create.useMutation();

  return (
    <form onSubmit={(e) => {
      e.preventDefault();
      const formData = new FormData(e.currentTarget);
      const inputs = formData.get('inputs') as string | undefined;
      const inputsArray = inputs?.split(',') ?? [];
      mutate({
        name: formData.get('name') as string,
        description: formData.get('description') as string | undefined,
        type: formData.get('type') as "WEBHOOK" | "CODE",
        code: formData.get('code') as string | undefined,
        webhookUrl: formData.get('webhookUrl') as string | undefined,
        inputs: inputsArray,
        createdByWalletAddress: formData.get('createdByWalletAddress') as string,
      });
    }}>
      <input name="name" />
      {error?.data?.zodError?.fieldErrors.title && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.title}
        </span>
      )}
      <input name="description" />
      {error?.data?.zodError?.fieldErrors.description && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.description}
        </span>
      )}
      <select name="type">
        <option value="WEBHOOK">WEBHOOK</option>
        <option value="CODE">CODE</option>
      </select>
      {error?.data?.zodError?.fieldErrors.type && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.type}
        </span>
      )}
      <input name="code" />
      {error?.data?.zodError?.fieldErrors.code && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.code}
        </span>
      )}
      <input name="webhookUrl" />
      {error?.data?.zodError?.fieldErrors.webhookUrl && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.webhookUrl}
        </span>
      )}
      <input name="inputs" />
      {error?.data?.zodError?.fieldErrors.inputs && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.inputs}
        </span>
      )}
      <input name="createdByWalletAddress" />
      {error?.data?.zodError?.fieldErrors.createdByWalletAddress && (
        <span className="mb-8 text-red-500">
          {error.data.zodError.fieldErrors.createdByWalletAddress}
        </span>
      )}
      <button type="submit">Create Plugin</button>
    </form>
  )
}


export default function Home() {
  const pluginsList = api.plugins.getAll.useQuery();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LandingPage/>
    </>
  );
}
